import (
  tf             "tensorflow:"
  mnistFormat    "datasets/mnist/format"

  trainingImages "http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz" "asset,sha256:440fcabf73cc546fa21475e81ea370265605f56be210a4024d2ca8f203523609"
  trainingLabels "http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz" "asset,sha256:3552534a0a558bbed6aed32b30c495cca23d567ec52cac8be1a0730e8010255c"
  testingImages  "http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz" "asset,sha256:8d422c7b0a1c1c79245a5bcf07fe86e33eeafee792b84584aec276f5a2dbc4e6"
  testingLabels  "http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz" "asset,sha256:f7ae60f92e00ec6debd23a6088c31dbd2371eca3ffa0defaefb259924204aec6"
)

func loadDataQueue[capacity](allImages, allLabels) {
  let q = tf.RandomShuffleQueue[
    capacity: capacity,
    min_after_dequeue: 0,
    dtypes: {tf.float64, tf.float32},
    shapes: {<10>, <784>},
  ]()

  nao.enqueue_many(q:queue_ref, {allLabels, allImages})

  emit ref = after __leaves { tf.identity(q:queue_ref) }
}

let testingImageData = tf.reshape(mnistFormat.ReadImages(testingImages), {10000, 784})
let testingLabelData = tf.reshape(mnistFormat.ReadLabels(testingLabels), {10000, 10})

func ForTesting() {
  let r = loadDataQueue[capacity: 10000](testingImageData, testingLabelData)
  emit ref = r
}

let trainingImageData = tf.reshape(mnistFormat.ReadImages(trainingImages), {60000, 784})
let trainingLabelData = tf.reshape(mnistFormat.ReadLabels(trainingLabels), {60000, 10})

func ForTraining() {
  let r = loadDataQueue[capacity: 60000](trainingImageData, trainingLabelData)
  emit ref = r
}
