import (
  log           "log"
  mnistQueue    "datasets/mnist/queue"
  digits        "demo/digits"
  gradDescent   "train/gradient_descent"

  tf            "tensorflow:"
  summary       "tensorflow:summary"
)

func Train() {
  let qRef = mnistQueue.ForTraining()
  UsingQueue(40, qRef)
}

func UsingQueue(maxSteps int32 <>, qRef resource <>) {
  let trainStep = gradDescent.Step[
    lossFn: func (d float, l double <?,10>, s int32) {
      emit e = digits.Loss(digits.Classify(d), l, s)
    },
    learningRate: 0.01,
  ]

  let f = for let step int32 <> = 0; step < maxSteps {
    let batchSize = 100

    let v = nao.dequeue_many[component_types: {tf.float64, tf.float32}](qRef, batchSize)

    let labels = v:0
    tf.reshape(v:1, [-1, 28, 28, 1]) -- images

    trainStep(images, labels, step) -- reducedMean
    log.Debug(reducedMean)

    <- step = after __leaves { step + 1 }
  }

  tf.Assert(f:step == maxSteps, {"f:step == maxSteps"})

  f:step
  ← result = after __leaves { 1 }
}
