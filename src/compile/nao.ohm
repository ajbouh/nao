NaoRules {
	Program = ImportDeclaration* TopLevelDecl*

	ImportDeclaration = "import" ImportDeclarationBody
	ImportDeclarationBody =
	  | ImportSpec                      -- single
	  | "(" nl* ImportSpec+ nl* ")" #sc -- multi
	ImportSpec = PackageName? ImportPath #sc
	PackageName = identifier
	ImportPath = stringLiteral

	TopLevelDecl
	  = FunctionDeclaration
		| GraphDefinition

	FunctionDeclaration = #(func ws+ identifier) FunctionSignature FunctionBlock
	FunctionLiteral = func FunctionSignature FunctionBlock
	FunctionTypeLiteral = func FunctionSignature
	FunctionSignature = FunctionAttributes? FunctionInputs
	FunctionAttributes = "[" FunctionParameters<FunctionAttributeType, "]"> "]"
	FunctionAttributeType = AttributeType? (">=" integer)? ("=" AttributeValue)?
	FunctionInputs = "(" FunctionParameters<TensorKind, ")"> ")"
	FunctionParameters<type, la> = ListOfLookahead<FunctionParameter<type>, ",", la>
	FunctionParameter<type> = identifier type?
	FunctionBlock = "{" nl* FunctionBody "}" nl*
	FunctionBody = FunctionElement*
	FunctionElement =
	    ( OutputDeclaration
	    | Assignment
	    | AfterStatement
	    | Expression
	    ) #sc


	GraphDefinition = #(graph ws+ identifier) "{" nl* GraphBody "}" nl*
	GraphBody = GraphElement*
	GraphElement =
	    ( InputDeclaration
	    | OutputDeclaration
	    | Assignment
	    | AfterStatement
	    | Expression
	    ) #sc

	InputGlyph = "->" | "\u2192"
	OutputGlyph = "<-" | "\u2190" | "emit"

	AttributeType
	  = FunctionTypeLiteral
	  | TensorKind
	  | identifier
	TensorKind = TensorType TensorShape?
	TensorShape
	  = "<" ListOfLookahead<(number | "?"), ",", ">"> ">" -- literal
	TensorType =
	  | float
	  | double
	  | int8
	  | int16
	  | int32
	  | int64
	  | uint8
	  | uint16
	  | string
	  | bool
	  | complex64
	  | complex128
	  | qint8
	  | qint32
	  | quint

	InputDeclaration = InputGlyph identifier TensorKind?
	OutputDeclaration = OutputGlyph identifier (TensorKind? equal Expression)?
	OutputTypeDeclaration = OutputGlyph identifier TensorKind -- output

	AfterStatement = #(after ws+ "__leaves") "{" nl* AfterBody "}" nl*
	AfterBody = GraphElement*

	identifierStart = letter | "_"
	identifierPart = alnum | "_"
	identifier  (an identifier)
	  = identifierStart identifierPart*

	ListOfLookahead<elem, sep, la>
	  = nonemptyListOfLookahead<elem, sep, la>
	  | EmptyListOf<elem, sep>

	nonemptyListEol<sep> = (sep (ws* nl ws*)+)
	nonemptyListOfLookaheadEntry<elem, sep, la>
	  = nl* elem ws* (sep ws* elem ws*)* (nonemptyListEol<sep> | &la)
	nonemptyListOfLookahead<elem, sep, la>
	  = nonemptyListOfLookaheadEntry<elem, sep, la>+

	ws (some whitespace)
	  = "\t"
	  | "\x0B"	-- verticalTab
	  | "\x0C"	-- formFeed
	  | " "
	  | "\u00A0"  -- noBreakSpace
	  | "\uFEFF"  -- byteOrderMark
	  | unicodeSpaceSeparator
	unicodeSpaceSeparator = "\u2000".."\u200B" | "\u3000"

	// A semicolon is "automatically inserted" if a newline or the end of the input stream is
	// reached, or the offending token is "}".
	// NOTE: Applications of this rule *must* appear in a lexical context -- either in the body of a
	// lexical rule, or inside `#()`.
	sc
	  = spacesNoNL (nl+ | ~multiLineCommentNoNL multiLineComment | &"}" | &")") -- a
      | space* (";" | end | nl+) (space | nl)* -- b

	sourceCharacter = any

	comment = multiLineComment | singleLineComment
	multiLineComment = "/*" (~"*/" sourceCharacter)* "*/"
	singleLineComment = "//" (~nl sourceCharacter)*

	// Override Ohm's built-in definition of space.
	space := ws | comment

	nl = "\n"
	multiLineCommentNoNL = "/*" (~("*/" | nl) sourceCharacter)* "*/"

	// does not accept lineTerminators, not even implicit ones in a multiLineComment
	spacesNoNL = (ws | singleLineComment | multiLineCommentNoNL)*

	number  (a number)
	  = (("+" | "-") ws*)? digit* "." digit+ "j"? -- fract
	  | (("+" | "-") ws*)? digit+ "j"?            -- whole
	integer (an integer) = digit+

	char        =  escape
	              |  ~"\\" ~"\"" ~"'" ~"\n" any
	escape      =  "\\\\" | "\\\"" | "\\'" | "\\n" | "\\t"
	stringLiteral (a string)
	   =  "\"" (char | "\'")* "\""

  Assignment = #(identifier ws+) TensorKind? #("=" ws+) Expression
	Expression  = Expression1 #(ws+ "--" ws+ identifier)?
	Expression1 = NonemptyListOf<Expression2, reverseComposition>
	Expression2 = NonemptyListOf<Expression3, relop>
	Expression3 = NonemptyListOf<Expression4, addop>
	Expression4 = NonemptyListOf<Expression5, mulop>
	Expression5 = Expression6 #indexSuffix?
	Expression6
	  = // |  "(" Expression ")"                -- parens
	  | TensorLiteral
		| ListLiteral
		| IfExpression
		| RecExpression
		| above -- aboveRef
		| here -- hereRef
		| #(invocationNamespace? identifier) AttributeBlock? "(" ListOfLookahead<Expression, ",", ")"> ")" -- applyPos
		| #(invocationNamespace? identifier) AttributeBlock? "(" KeywordArguments ")" -- applyKwd
		| #(invocationNamespace? identifier) AttributeBlockWithEllipsis? -- reference

	// TODO(adamb) Should actually allow multiple conditional expressions, taking the last one.
	// TODO(adamb) Should also allow multiple then and else expressions.
	IfExpression = #("if" ws+) Expression "{" nl* Expression #sc "}" "else" "{" nl* Expression #sc "}"

	RecExpression = #("rec" ws+) RecInitializers RecCondition RecBody
	RecInitializers = (Assignment #sc)+
	RecCondition = Expression
	RecBody = "{" nl* (RecBodyExpression #sc)+ "}"
	RecBodyExpression
		= Expression
		| OutputDeclaration

	indexSuffix = ":" (indexIdentifier | indexNumber)
	indexIdentifier = identifier
	indexNumber = digit+

	relop       =  "<=" | "<" | "==" | "!=" | ">=" | ">"
	addop       =  "+" | "-"
	mulop       =  "*" | "/"

	invocationNamespace = identifier "."

	KeywordArguments = nonemptyListOfLookahead<KeywordArgument, ",", ")">
	KeywordArgument = ArgumentName #(":" ws+) Expression
	ArgumentName = identifier

	AttributeBlock = #("[" nl*) AttributeList<"]"> nl* "]"
	AttributeList<la> = nonemptyListOfLookahead<AttributeEntry, ",", la>

	AttributeBlockWithEllipsis = #("[" nl*) AttributeListWithEllipsis<"]"> nl* "]"
	AttributeListWithEllipsis<la> = nonemptyListOfLookahead<(AttributeEntry | "..."), ",", la>
	AttributeEntry = AttributeName ":" AttributeValue
	AttributeName = identifier
	AttributeValue
	  = AttributeValueList
	  | FunctionLiteral
	  | TensorShape
		| Expression

	ListLiteral = "{" ListOfLookahead<ListLiteralEntry, ",", "}"> "}"
	ListLiteralEntry =
	  | ListLiteral
		| Expression

	TensorLiteral = TensorLiteralElement
	TensorLiteralElement
	  = number  -- number
	  | "true"  -- true
	  | "false" -- false
	  | stringLiteral -- string
	  | "[" ListOfLookahead<TensorLiteralElement, ",", "]"> "]" -- arr

	AttributeValueList = "[" ListOfLookahead<AttributeValueListEntry, ",", "]"> "]"
	AttributeValueListEntry
	  = TensorLiteral
	  | TensorShape

	// TODO(adamb) Implement these next!
	above = "^" ~identifierPart
	reverseComposition = "->"
	here = "."

	// Convenience rules for keywords
	scalar = "scalar" ~identifierPart
	float = "float" ~identifierPart
	double = "double" ~identifierPart
	int8 = "int8" ~identifierPart
	int16 = "int16" ~identifierPart
	int32 = "int32" ~identifierPart
	int64 = "int64" ~identifierPart
	uint8 = "uint8" ~identifierPart
	uint16 = "uint16" ~identifierPart
	string = "string" ~identifierPart
	bool = "bool" ~identifierPart
	complex64 = "complex64" ~identifierPart
	complex128 = "complex128" ~identifierPart
	qint8 = "qint8" ~identifierPart
	qint32 = "qint32" ~identifierPart
	quint = "quint" ~identifierPart
	const = "const" ~identifierPart

	after = "after" ~identifierPart
	graph = "graph" ~identifierPart
	func = "func" ~identifierPart
	var = "var" ~identifierPart
	equal = "=" ~identifierPart
}
