func identityBool(z) {
  ← z
}

graph testIdentityBool {
  x = true
  tf.Assert(identityBool(x), {""})

  after __leaves { ← result = 0 }
}

// split

func doubleSum(a, b) {
  <- c = a + b * 2.0 + a
}

graph testSum {
  x = 1.0
  y = 3.0
  tf.Assert(8.0 == doubleSum(x, y), {""})

  after __leaves { ← result = 0 }
}

// split

graph testComparisons {
  tf.Assert(0 == 1 - 1 + 1 - 1 + 1 - 1, {"0 == 1 - 1 + 1 - 1 + 1 - 1"})
  tf.Assert(1 < 2, {"1 < 2"})
  tf.Assert(1 <= 2, {"1 <= 2"})
  tf.Assert(1 == 1, {"1 == 1"})
  tf.Assert(1 != 2, {"1 != 2"})
  tf.Assert(1 > 0, {"1 > 0"})
  tf.Assert(1 >= 0, {"1 >= 0"})

  tf.Assert(false == 2 < 1, {"false == 2 < 1"})
  tf.Assert(false == 2 <= 1, {"false == 2 <= 1"})
  tf.Assert(false == 2 == 1, {"false == 2 == 1"})
  tf.Assert(false == 1 != 1, {"false == 1 != 1"}) -- failing
  tf.Assert(false == 0 > 1, {"false == 0 > 1"})
  tf.Assert(false == 0 >= 1, {"false == 0 >= 1"})
  tf.Assert(false == 0 > 1, {"false == 0 > 1"})

  after __leaves { ← result = 0 }
}

// split

func bifurcate(x) {
  <- out1 = x
  <- out2 = x + 0.0
}

graph testBifurcate {
  bifurcate(1.0) -- b
  tf.Assert(1.0 == b:out1, {"1.0 == b:out1"})
  tf.Assert(b:out2 == b:out1, {"b:out2 == b:out1"})

  after __leaves { ← result = 0 }
}

// split

func max(a, b) {
  <- c = if a > b {
    tf.identity(a)
  } else {
    tf.identity(b)
  }
}

graph testMax {
  tf.Assert(1.0 == max(0.1, 1.0), {"1.0 == max(0.1, 1.0)"})
  tf.Assert(1.0 == max(1.0, 0.1), {"1.0 == max(1.0, 0.1)"})

  after __leaves { ← result = 0 }
}

// split

func attrOutput[c]() {
  <- c
}

graph testAttrOutput {
  tf.Assert(1 == attrOutput[c: 1](), {""})

  after __leaves { ← result = 0 }
}

// split

func applyFnToSum[f, a](b) {
  <- result = f(a + b)
}

graph testFnAttr {
  1.0 -- one
  2.0 -- two
  3.0 -- three

  applyFnToSum[
    a: one,
    f: func(x) {
      <- result = x * three
    },
  ](two) -- result

  tf.Assert(9.0 == result, {"9.0 == result", result})

  after __leaves { ← r2 = 0 }
}

// split

func increment(a) {
  <- result = a + 1.0
}

func decrementBy(a, b) {
  <- result = a - b
}

func doubler(a) {
  <- result = a * 2.0
}

func incrementDoubler(a) {
  a
  increment(^)
  doubler(^)
  <- result = ^
}

graph testArrows {
  1.0 -> increment(.) -> doubler(.) -- r0
  tf.Assert(4.0 == r0, {"Problem with pipe arrow and dot"})

  1.0 -> increment(.) -> decrementBy(123.0, .) -- r1
  tf.Assert(121.0 == r1, {"Problem with pipe arrow dot in second position"})

  2.0 -> decrementBy(3.0 -> doubler(.), .) -- r2
  tf.Assert(4.0 == r2, {"Problem with nested pipe arrow"})

  1.0 -> decrementBy(., -3.0) -> doubler(.) -- r3
  tf.Assert(8.0 == r3, {"Problem with pipe arrow and multiple args"})

  1.0 -> increment -> doubler -- r4
  tf.Assert(4.0 == r4, {"Problem with pipe arrow"})

  1.0
  increment(^)
  doubler(^)
  ^ -- r5
  tf.Assert(4.0 == r5, {"Problem with up arrow"})

  incrementDoubler(5.0)
  tf.Assert(12.0 == ^, {"Problem with up arrow"})

  after __leaves { ← result = 0 }
}

// split

graph testLoop {
  rec x = 1; x <= 5 {
    <- x = x + 1
  } -- out

  tf.Assert(out:x == 6, {"out:x == 6"})

  after __leaves { ← result = 0 }
}
